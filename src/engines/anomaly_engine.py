import numpy as np\nfrom sklearn.ensemble import IsolationForest\nimport prometheus_client as prom\n\nclass RealTimeAnomalyEngine:\n    def __init__(self):\n        self.model = IsolationForest(contamination=0.1)\n        self.is_trained = False\n        \n        # Prometheus metrics\n        self.anomaly_score = prom.Gauge('anomaly_score', 'Real-time anomaly score')\n        self.threat_level = prom.Gauge('threat_level', 'Current threat level')\n    \n    def train_model(self, normal_data):\n        self.model.fit(normal_data)\n        self.is_trained = True\n    \n    def detect_anomalies(self, real_time_data):\n        if not self.is_trained:\n            return []\n        \n        predictions = self.model.predict(real_time_data)\n        anomaly_scores = self.model.decision_function(real_time_data)\n        \n        # Update Prometheus metrics\n        self.anomaly_score.set(np.mean(anomaly_scores))\n        self.threat_level.set(np.sum(predictions == -1))\n        \n        return predictions.tolist()